enum ProductState {
  CREATED
  MODERATING
  APPROVED
  DECLAINED
}

type Product {
  id: ID!
  """
  Current state of product
  """
  state: ProductState!
  """
  Declain reason
  """
  declainReason: String # @hasRole(roles: [OWNER, MANAGER])
  """
  Title of product
  """
  title: String!
  """
  Product description
  """
  description: String!
  """
  Current owner of product
  """
  owner: User!
  """
  Creator of product
  """
  creator: User!
  """
  Product images
  """
  images: [ProductImage!]!
  auctions(
    first: Int
    after: Cursor
    filter: AuctionsFilter
  ): AuctionsConnection! # @hasRole(roles: USER)
}

"""
Product image
"""
type ProductImage {
  id: ID!
  filename: String!
  path: String!
}

type ProductsConnectionEdge {
  cursor: Cursor!
  node: Product!
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsConnectionEdge!]!
}

input ProductsFilter {
  state: [ProductState!] = []
  ownerIDs: [String!] = []
}

extend type Query {
  """
  List all products
  """
  products(
    first: Int
    after: String
    filter: ProductsFilter
  ): ProductsConnection! @hasRole(roles: [MANAGER])
}

input UpdateProductInput {
  productId: ID!
  title: String!
  description: String!
}

type ProductResult {
  product: Product!
}

input ProductInput {
  productId: ID!
}

input DeclineProductInput {
  productId: ID!
  declainReason: String
}

type OfferProductResult {
  product: Product!
}

type TakeOffProductResult {
  product: Product!
}

type SellProductResult {
  product: Product!
}

extend type Mutation {
  """
  Creates product with creator of current viewer
  """
  createProduct: ProductResult!
  """
  Update product info
  """
  updateProduct(input: UpdateProductInput!): ProductResult!
  """
  Request token to send product for modetaion
  """
  requestModerateProduct(input: ProductInput!): Boolean!
  """
  Set product state to moderating
  """
  approveModerateProduct(input: TokenInput!): ProductResult!

  """
  Approve product
  """
  approveProduct(input: ProductInput!): ProductResult!
    @hasRole(roles: [MANAGER])
  """
  Declain product
  """
  declainProduct(input: DeclineProductInput!): ProductResult!
    @hasRole(roles: [MANAGER])
}

# type Subscription {
#   productOffered: Product
# }
