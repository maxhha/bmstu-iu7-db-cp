enum OfferState {
  CREATED
  CANCELLED
  ACCEPTED
  SUCCEEDED
  FAILED
}

type Offer {
  id: ID!
  """
  Current offer state
  """
  state: OfferState!
  """
  User created this offer
  """
  user: User!
  """
  Auction for which this offer was created
  """
  auction: Auction!
  """
  Total moneys offered
  """
  moneys: [Money!]!
  """
  Offer creation time
  """
  createdAt: DateTime!
  """
  Transactions of this offer
  """
  transactions: [Transaction!]! @hasRole(roles: USER)
  dealHistory: [DealState!]! @hasRole(roles: USER)
}

type OffersConnectionEdge {
  cursor: Cursor!
  node: Offer!
}

type OffersConnection {
  pageInfo: PageInfo!
  edges: [OffersConnectionEdge!]!
}

input CreateOfferInput {
  auctionId: ID!
  accountId: ID!
  amount: Float!
}

type OfferResult {
  offer: Offer!
}

input OffersFilter {
  IDs: [ID!] = []
  states: [OfferState!] = []
  userIDs: [ID!] = []
  auctionIDs: [ID!] = []
}

extend type Query {
  """
  ALl offers
  """
  offers(
    first: Int
    after: Cursor
    filter: OffersFilter = {}
  ): OffersConnection! @hasRole(roles: [MANAGER])
}

extend type Mutation {
  """
  Create offer for auction
  """
  createOffer(input: CreateOfferInput!): OfferResult!
}
