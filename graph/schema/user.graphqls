input UserFormHistoryFilter {
  state: [UserFormState!] = []
  id: [ID!] = []
}

type User {
  id: ID!
  """
  User current personal information
  """
  form: UserFormFilled @hasRole(roles: [USER, MANAGER])
  """
  User new personal information
  """
  draftForm: UserForm @hasRole(roles: [OWNER, MANAGER])
  """
  User history of personal information (only for managers)
  """
  formHistory(
    first: Int
    after: Cursor
    filter: UserFormHistoryFilter = {}
  ): UserFormsConnection! @hasRole(roles: [OWNER, MANAGER])
  """
  End date of blocking this user
  """
  blockedUntil: DateTime @hasRole(roles: [OWNER, MANAGER])
  """
  User accounts
  """
  accounts(
    first: Int
    after: Cursor
    filter: AccountsFilter = {}
  ): AccountsConnection! @hasRole(roles: [OWNER, MANAGER])
  """
  Auctions which user created
  """
  auctions(first: Int, after: Cursor): AuctionsConnection!
    @hasRole(roles: [OWNER, MANAGER])
  """
  User offers
  """
  offers(
    first: Int
    after: Cursor
    filter: OffersFilter = {}
  ): OffersConnection! @hasRole(roles: [OWNER, MANAGER])
  """
  User products in which he is owner
  """
  products(first: Int, after: Cursor): ProductsConnection!
    @hasRole(roles: [OWNER, MANAGER])
}

type UsersConnectionEdge {
  cursor: Cursor!
  node: User!
}

type UsersConnection {
  pageInfo: PageInfo!
  edges: [UsersConnectionEdge!]!
}

input UsersFilter {
  id: [ID!] = []
}

extend type Query {
  """
  Authorized user
  """
  viewer: User
  """
  List of all users
  """
  users(first: Int, after: Cursor, filter: UsersFilter = {}): UsersConnection
    @hasRole(roles: [MANAGER])
}

type UserResult {
  user: User!
}

input RequestSetUserEmailInput {
  email: String!
}

input RequestSetUserPhoneInput {
  phone: String!
}

input UpdateUserPasswordInput {
  oldPassword: String
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

input UpdateUserDraftFormInput {
  name: String
  currency: CurrencyEnum
}

extend type Mutation {
  """
  Registrates empty user
  """
  register: TokenResult!
  """
  User login
  """
  login(input: LoginInput!): TokenResult!

  """
  Request set user email
  """
  requestSetUserEmail(input: RequestSetUserEmailInput!): Boolean!
  """
  Request set user email
  """
  requestSetUserPhone(input: RequestSetUserPhoneInput!): Boolean!
  """
  First input of users email
  """
  approveSetUserEmail(input: TokenInput!): UserResult!
  """
  First input of users
  """
  approveSetUserPhone(input: TokenInput!): UserResult!
  """
  Update user password using old password
  """
  updateUserPassword(input: UpdateUserPasswordInput!): UserResult!
  """
  Update user draft form fields
  """
  updateUserDraftForm(input: UpdateUserDraftFormInput!): UserResult!
}
