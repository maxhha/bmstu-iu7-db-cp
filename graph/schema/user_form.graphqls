enum UserFormState {
  CREATED
  MODERATING
  APPROVED
  DECLAINED
}

"""
User personal information
"""
type UserForm {
  id: ID!
  """
  User form state
  """
  state: UserFormState!
  """
  User email
  """
  email: String
  """
  User phone
  """
  phone: String
  """
  User name
  """
  name: String
  """
  User default currency
  """
  currency: CurrencyEnum
  """
  UserForm owner
  """
  user: User!
}

"""
UserFrom with all required fields filled in
"""
type UserFormFilled {
  """
  User email
  """
  email: String! @hasRole(roles: [OWNER, MANAGER])
  """
  User phone
  """
  phone: String! @hasRole(roles: [OWNER, MANAGER])
  """
  User name
  """
  name: String!
  """
  User default currency
  """
  currency: CurrencyEnum! @hasRole(roles: [OWNER, MANAGER])
}

type UserFormsConnectionEdge {
  cursor: Cursor!
  node: UserForm!
}

type UserFormsConnection {
  pageInfo: PageInfo!
  edges: [UserFormsConnectionEdge!]!
}

input UserFormsFilter {
  state: [UserFormState!] = []
  id: [ID!] = []
  userId: [ID!] = []
}

extend type Query {
  """
  List of all user forms
  """
  userForms(
    first: Int
    after: Cursor
    filter: UserFormsFilter = {}
  ): UserFormsConnection! @hasRole(roles: [MANAGER])
}

input ApproveUserFormInput {
  userFormId: ID!
}

type UserFormResult {
  userForm: UserForm!
}

input DeclineUserFormInput {
  userFormId: ID!
  declainReason: String
}

extend type Mutation {
  """
  Send token for user form moderation
  """
  requestModerateUserForm: Boolean!
  """
  Set user form state to moderate
  """
  approveModerateUserForm(input: TokenInput!): UserResult!

  """
  Approve user form
  """
  approveUserForm(input: ApproveUserFormInput!): UserFormResult!
    @hasRole(roles: [MANAGER])
  """
  Decline user form
  """
  declineUserForm(input: DeclineUserFormInput!): UserFormResult!
    @hasRole(roles: [MANAGER])
}
