    CREATE TYPE token_action AS ENUM (
      'SET_USER_EMAIL',
      'SET_USER_PHONE',
      'MODERATE_USER_FORM'
    );

    -- tokens are sent to clients by other means
    -- they must be activated to perform some actions 
    CREATE TABLE tokens (
        id DECIMAL(6, 0),
        user_id SHORTKEY NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW(),
        activated_at TIMESTAMP,
        expires_at TIMESTAMP NOT NULL,
        action token_action NOT NULL,
        data JSONB,
        CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        PRIMARY KEY (id, user_id)
    );

    -- delete expired and not activated tokens
    SELECT cron.schedule('*/5 * * * *', $$DELETE FROM tokens WHERE expires_at < NOW() AND activated_at IS NULL$$);

    CREATE OR REPLACE FUNCTION token_generate()
    RETURNS TRIGGER AS $$
    DECLARE
        key DECIMAL(6, 0);
        qry TEXT;
        found DECIMAL(6, 0);
    BEGIN
        -- tokens must be generated by this function
        -- id = 0 is also means empty
        IF NEW.id IS NOT NULL AND NEW.id <> 0 THEN
            RAISE 'Tokens id must be generated by database';
        END IF;

        IF NEW.user_id IS NULL THEN
            RAISE 'user_id must be provided';
        END IF;

        -- query to check if this token already exists
        qry := 'SELECT id, user_id FROM tokens WHERE user_id = ' || quote_literal(NEW.user_id) || ' AND id =';

        LOOP
            key := floor(random() * 999999 + 1);
