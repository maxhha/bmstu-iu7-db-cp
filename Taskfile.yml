version: "3"
# https://taskfile.dev/#/installation

tasks:
  gen:gql:
    desc: Generate code for GraphQL schema
    cmds:
      - go run github.com/99designs/gqlgen generate
    sources:
      - gqlgen.yml
      - models/*.go
      - graph/**/*.resolvers.go
      - graph/schema/**/*.graphqls
    generates:
      - models/models_gen.go
      - graph/**/*.resolvers.go
      - graph/generated/generated.go

  it:gen:gql:
    desc: Generate code for GraphQL schema in integration test
    dir: integration_test
    cmds:
      - npm run gql:gen
    sources:
      - src/**/*.graphql
      - ../graph/schema/**/*.graphqls
    generates:
      - src/query/index.ts

  gen:grpc:
    desc: Generate code for grpc
    cmds:
      - PATH=$PATH:$(go env GOPATH)/bin protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative grpc/**/*.proto
    sources:
      - grpc/**/*.proto
    generates:
      - grpc/**/*.pb.go

  build:mock_notifier:
    desc: Builds image of mock_notifier service
    sources:
      - grpc/notifier/*.go
      - services/mock_notifier/*
    vars:
      DOCKERCOMPOSE: config/docker-compose.{{.ENV}}.yml
    cmds:
      - docker-compose -f {{.DOCKERCOMPOSE}} build mock-notifier-{{.ENV}}

  log:mock_notifier:
    desc: Follow logs of mock_notifier container
    cmds:
      - (docker logs -f auction-mock-notifier-{{.ENV}}-1 | sed 's/^/[NOTIFIER] /') &

  build:mock_bank:
    desc: Builds image of mock_bank service
    sources:
      - services/mock_bank/*
    vars:
      DOCKERCOMPOSE: ./config/docker-compose.{{.ENV}}.yml
    cmds:
      - docker-compose -f {{.DOCKERCOMPOSE}} build mock-bank-{{.ENV}}

  restart:migration:
    desc: Restarts migration container
    cmds:
      - cmd: docker restart auction-migration-{{.ENV}}-1
        ignore_error: "{{.IGNORE_ERROR | default false}}"
    sources:
      - migrations/*

  create:dev-network:
    desc: Creates dev network
    cmds:
      - docker network create auction_backend-dev
    status:
      - test "$(docker network inspect auction_backend-dev)" != "[]"

  dev:down:
    desc: Removes all dev containers
    vars:
      DOCKERCOMPOSE: config/docker-compose.dev.yml
    cmds:
      - docker-compose -f {{.DOCKERCOMPOSE}} down

  dev:mock_bank:
    desc: Starts dev mock_bank
    deps:
      - task: create:dev-network
      - task: restart:migration
        vars:
          ENV: dev
          IGNORE_ERROR: true
    dotenv: ./config/.mock-bank.env
    vars:
      DOCKERCOMPOSE: config/docker-compose.dev.yml
    cmds:
      - docker-compose -f {{.DOCKERCOMPOSE}} up -d
      - defer: docker-compose -f {{.DOCKERCOMPOSE}} stop
      - go run services/mock_bank/*.go

  dev:
    desc: Start dev server
    deps:
      - task: create:dev-network
      - task: build:mock_notifier
        vars:
          ENV: dev
      - task: build:mock_bank
        vars:
          ENV: dev
      - task: restart:migration
        vars:
          ENV: dev
          IGNORE_ERROR: true
      - gen:portmocks # mocks are used in code validation
    env:
      SERVER_DOTENV: config/.server-dev.env
    vars:
      DOCKERCOMPOSE: config/docker-compose.dev.yml
    cmds:
      - docker-compose -f {{.DOCKERCOMPOSE}} up -d
      - defer: docker-compose -f {{.DOCKERCOMPOSE}} stop
      - task: log:mock_notifier
        vars:
          ENV: dev
      - air -c config/.air.toml

  dir:out:
    desc: Creates out directiory
    cmds:
      - mkdir -p out
    status:
      - test -d out

  gen:portmocks:
    desc: Generates mocks for ports interfaces
    cmds:
      - go generate -run "/codegen/portmocks/main.go" ./...
    sources:
      - portmocksgen.yml
      - ports/*.go
      - codegen/portmocks/*
    generates:
      - ports/*_mock.go

  gen:gormdbops:
    desc: Generates gorm operations for models
    cmds:
      - go generate -run "/codegen/gormdbops/main.go" ./...
    sources:
      - adapters/database/*.go
      - codegen/gormdbops/*
    generates:
      - adapters/database/*_gen.go

  filter-cover:
    desc: Filters generated files from coverage output
    cmds:
      - cat {{.IN}} | grep -v "_gen.go\|_suite.go\|generated.go\|.pb.go\|_mock.go" > {{.OUT}}

  test:
    desc: Run test with colorful output
    cmds:
      - grc -c config/grc-test.conf go test {{.CLI_ARGS}}

  test:unit:
    desc: Get code coverage by unit tests
    deps:
      - dir:out
      - gen:portmocks
    vars:
      TMPOUT: ./out/unit-coverage.tmp.out
      OUT: ./out/unit-coverage.out
      HTML: ./out/unit-coverage.html
    cmds:
      - go test -coverprofile={{.TMPOUT}} ./...
      # remove generated code from coverage
      - task: filter-cover
        vars:
          IN: "{{.TMPOUT}}"
          OUT: "{{.OUT}}"
      - go tool cover -html={{.OUT}} -o {{.HTML}}
      - go tool cover -func={{.OUT}}

  test:it:
    desc: Get code coverage by integration tests
    deps:
      - dir:out
      - task: build:mock_notifier
        vars:
          ENV: test
      - task: build:mock_bank
        vars:
          ENV: test
    env:
      SERVER_DOTENV: config/.server-test.env
      GIN_MODE: test
    vars:
      TMPOUT: ./out/it-coverage.tmp.out
      OUT: ./out/it-coverage.out
      HTML: ./out/it-coverage.html
      DOCKERCOMPOSE: config/docker-compose.test.yml
    cmds:
      - docker-compose -f {{.DOCKERCOMPOSE}} up --force-recreate -d
      - defer: docker-compose -f {{.DOCKERCOMPOSE}} down
      - task: log:mock_notifier
        vars:
          ENV: test
      - go test -tags=integration -coverprofile={{.TMPOUT}} -coverpkg="auction-back/..."
      - task: filter-cover
        vars:
          IN: "{{.TMPOUT}}"
          OUT: "{{.OUT}}"
      - go tool cover -html={{.OUT}} -o {{.HTML}}
      - go tool cover -func={{.OUT}}

  test:all:
    desc: Get total code coverage by all tests
    deps:
      - test:unit
      - test:it
    vars:
      OUT: ./out/total-coverage.out
      HTML: ./out/total-coverage.html
    cmds:
      - >
        echo "mode: set" > {{.OUT}} &&
        cat ./out/*-coverage.out |
        grep -v mode: |
        sort -r |
        awk '{if($1 != last) {print $0;last=$1}}' >> {{.OUT}}
      - go tool cover -html={{.OUT}} -o {{.HTML}}
      - go tool cover -func={{.OUT}}
